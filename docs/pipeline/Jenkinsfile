def zap_target = "http://192.168.56.1:3000/"
def zap_api_target = "https://raw.githubusercontent.com/elenore55/jenkins-test/main/JuiceShop.json"
def today

void uploadToDefectDojo(String scanType, String reportName, String reportType) {
    today = sh(script: 'date +%Y-%m-%d', returnStdout: true).trim()
    sh """
        curl -X 'POST' \
            'http://192.168.56.1:8080/api/v2/import-scan/' \
            -H 'accept: application/json' \
            -H 'Content-Type: multipart/form-data' \
            -H 'Authorization: Token cef0d4dbcc7cc84717c3e2bb7538e048a0eb8a79' \
            -F 'scan_date=$today' \
            -F 'minimum_severity=Info' \
            -F 'active=true' \
            -F 'verified=true' \
            -F 'scan_type=$scanType' \
            -F 'file=@${WORKSPACE}/$reportName;type=$reportType' \
            -F 'product_name=ZOSS-Project' \
            -F 'engagement_name=AdHoc Import - Sun, 14 Jan 2024 12:48:56' \
            -F 'close_old_findings=false' \
            -F 'close_old_findings_product_scope=false' \
            -F 'push_to_jira=false' \
            -F 'create_finding_groups_for_all_findings=true'
    """
}

pipeline {
    agent any

    tools {nodejs "NodeJs"}
    
    stages {
        
        // GIT SECRETS - TRUFFLEHOG
        
        stage('Git Secrets Scan') {
            steps {
                script {
                    sh 'docker pull trufflesecurity/trufflehog:latest'
                    sh 'docker run -t trufflesecurity/trufflehog git https://github.com/juice-shop/juice-shop.git --json >> ${WORKSPACE}/truffle_findings.json'
                }
                
                uploadToDefectDojo('Trufflehog Scan', 'truffle_findings.json', 'application/json')
            }
        }
        
        // SCA - SNYK
        
        stage('SCA Preparation') {
            steps {
                script {
                    git 'https://github.com/juice-shop/juice-shop.git'
                }
            }
        }

        stage('Install') {
            steps {
                script {
                    sh '/usr/bin/npm install'    
                }
            }
        }
        
        stage('Snyk Scan') {
            steps {
                snykSecurity(
                    severity: 'medium',
                    snykInstallation: 'Snyk',
                    snykTokenId: 'SnykTokenId',
                    targetFile: 'package.json',
                    failOnError: false,
                    failOnIssues: false,
                    additionalArguments: '--json-file-output=${WORKSPACE}/snyk_findings.json'
                )
                
                uploadToDefectDojo('Snyk Scan', 'snyk_findings.json', 'application/json')
            }
        }

        // SAST - SONARQUBE

        stage('Clone sources') {
            steps {
                git branch: 'main', url: 'https://github.com/juice-shop/juice-shop.git'
            }
        }
    
        stage('SonarQube analysis') {
            environment {
                SCANNER_HOME = tool 'SonarQubeScanner';    
            }
            
            steps {
                
                withSonarQubeEnv('SonarQube') {
                    sh "${SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectKey=JuiceShopProjectKey -Dsonar.organization=JuiceShopORG -Dsonar.projectName=JuiceShop -Dsonar.sources=src -Dsonar.exclusions=node_modules/**/* -Dsonar.sourceEncoding=UTF-8"
                }
            }
        }
        
        // SAST - SEMGREP

        stage('Static Security Testing with Semgrep') {
            steps {
                script {
                    sh 'pip3 install semgrep --break-system-packages'
                    sh '/var/jenkins_home/.local/bin/semgrep scan --config auto --json --output=${WORKSPACE}/semgrep_findings.json'
                    sh 'cat ${WORKSPACE}/semgrep_findings.json'
                }
                
                uploadToDefectDojo('Semgrep JSON Report', 'semgrep_findings.json', 'application/json')
            }
        }
        
        // DAST - ZAP
        
        stage('Setting up OWASP ZAP docker container') {
            steps {
                script {
                    sh 'docker pull owasp/zap2docker-stable'
                    sh """
                        docker run -dt --name owasp \
                        owasp/zap2docker-stable \
                        /bin/bash
                    """
                }
            }
        }
 
        stage('Initialize wrk directory') {
            steps {
                script {
                    echo "Creating wrk directory"
                    
                    sh """
                        docker exec owasp \
                        mkdir /zap/wrk
                    """
                }
                
                script {
                    echo "Moving context to wrk directory"
                    
                    sh 'docker cp /var/run/juice.context owasp:/zap/wrk/juice.context'
                    sh 'docker cp /var/run/Juice_Shop_Session_Management.js owasp:/zap/wrk/Juice_Shop_Session_Management.js'
                    sh 'docker cp /var/run/Selenium_Juice_Shop.js owasp:/zap/wrk/Selenium_Juice_Shop.js'
                }
            }
        }
        
        stage('API scan') {
            steps {
                script {
                    echo "API SCAN"
                
                    sh """
                        docker exec owasp \
                        zap-api-scan.py \
                        -I -a \
                        -t $zap_api_target \
                        -f openapi \
                        -x api_report.xml \
                        -r api_report.html \
                        -w api_report.md
                    """
                }
            }
        }
        
        stage('Baseline scan') {
            steps {
                script {
                    echo "BASELINE SCAN"
                    
                    sh """
                        docker exec owasp \
                        zap-baseline.py \
                        -n juice.context \
                        -U test \
                        -z "-config script.scripts(0).name='Juice_Shop_Session_Management.js' -config script.scripts(0).engine='Graal.js' -config script.scripts(0).type=session_management -config script.scripts(0).file='/zap/wrk/Juice_Shop_Session_Management.js' -config script.scripts(1).name='Selenium_Juice_Shop.js' -config script.scripts(1).engine='Graal.js' -config script.scripts(1).type=selenium -config script.scripts(1).enabled=true -config script.scripts(1).file='/zap/wrk/Selenium_Juice_Shop.js'" \
                        -I -t $zap_target \
                        -x baseline_report.xml \
                        -r baseline_report.html \
                        -w baseline_report.md
                    """
                }
            }
        }
        
        stage('Full scan') {
            steps {
                script {
                    echo "FULL SCAN"
                    
                    sh """
                        docker exec owasp \
                        zap-full-scan.py \
                        -n juice.context \
                        -U test \
                        -I -j -a -m 20 \
                        -z "-config scanner.maxScanDurationInMins=20 -config scanner.threadPerHost=8 -config view.mode=attack -config script.scripts(0).name='Juice_Shop_Session_Management.js' -config script.scripts(0).engine='Graal.js' -config script.scripts(0).type=session_management -config script.scripts(0).file='/zap/wrk/Juice_Shop_Session_Management.js' -config script.scripts(1).name='Selenium_Juice_Shop.js' -config script.scripts(1).engine='Graal.js' -config script.scripts(1).type=selenium -config script.scripts(1).enabled=true -config script.scripts(1).file='/zap/wrk/Selenium_Juice_Shop.js'" \
                        -t $zap_target \
                        -x full_report.xml \
                        -r full_report.html \
                        -w full_report.md
                    """
                }
            }
        }

        stage('Copy Reports to Workspace') {
            steps {
                script {
                    echo "Copy"
                    sh '''
                        docker cp owasp:/zap/wrk/api_report.xml ${WORKSPACE}/api_report.xml
                        docker cp owasp:/zap/wrk/api_report.html ${WORKSPACE}/api_report.html
                        docker cp owasp:/zap/wrk/api_report.md ${WORKSPACE}/api_report.md
                        
                        docker cp owasp:/zap/wrk/baseline_report.xml ${WORKSPACE}/baseline_report.xml
                        docker cp owasp:/zap/wrk/baseline_report.html ${WORKSPACE}/baseline_report.html
                        docker cp owasp:/zap/wrk/baseline_report.md ${WORKSPACE}/baseline_report.md
                        
                        docker cp owasp:/zap/wrk/full_report.xml ${WORKSPACE}/full_report.xml
                        docker cp owasp:/zap/wrk/full_report.html ${WORKSPACE}/full_report.html
                        docker cp owasp:/zap/wrk/full_report.md ${WORKSPACE}/full_report.md
                    '''
                }
            }
        }
        
        stage('Upload reports') {
            steps {
                uploadToDefectDojo('Zap Scan', 'api_report.xml', 'text/xml')
                uploadToDefectDojo('Zap Scan', 'baseline_report.xml', 'text/xml')
                uploadToDefectDojo('Zap Scan', 'full_report.xml', 'text/xml')
            }
        }
    }

    post {
        always {
            echo "Removing OWASP ZAP container"
            sh '''
                docker stop owasp
                docker rm owasp
            '''
        }
    }
}